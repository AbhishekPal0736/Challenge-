
Cancer prediction use a linear regression

I used ybi foundation's data set in my project which I got from ybi foundation GitHub account and made cancer prediction using linear regression.

IMPORT LIBRARY

[ ]

import pandas as pandas
import seaborn as snc
IMPORT DATA

[ ]

df=pandas.read_csv('https://github.com/YBI-Foundation/Dataset/raw/main/Cancer.csv')
DESCRIBE DATA

[ ]

df.head()

USING INFO FUNCTION

[ ]

df.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 569 entries, 0 to 568
Data columns (total 33 columns):
 #   Column                   Non-Null Count  Dtype  
---  ------                   --------------  -----  
 0   id                       569 non-null    int64  
 1   diagnosis                569 non-null    object 
 2   radius_mean              569 non-null    float64
 3   texture_mean             569 non-null    float64
 4   perimeter_mean           569 non-null    float64
 5   area_mean                569 non-null    float64
 6   smoothness_mean          569 non-null    float64
 7   compactness_mean         569 non-null    float64
 8   concavity_mean           569 non-null    float64
 9   concave points_mean      569 non-null    float64
 10  symmetry_mean            569 non-null    float64
 11  fractal_dimension_mean   569 non-null    float64
 12  radius_se                569 non-null    float64
 13  texture_se               569 non-null    float64
 14  perimeter_se             569 non-null    float64
 15  area_se                  569 non-null    float64
 16  smoothness_se            569 non-null    float64
 17  compactness_se           569 non-null    float64
 18  concavity_se             569 non-null    float64
 19  concave points_se        569 non-null    float64
 20  symmetry_se              569 non-null    float64
 21  fractal_dimension_se     569 non-null    float64
 22  radius_worst             569 non-null    float64
 23  texture_worst            569 non-null    float64
 24  perimeter_worst          569 non-null    float64
 25  area_worst               569 non-null    float64
 26  smoothness_worst         569 non-null    float64
 27  compactness_worst        569 non-null    float64
 28  concavity_worst          569 non-null    float64
 29  concave points_worst     569 non-null    float64
 30  symmetry_worst           569 non-null    float64
 31  fractal_dimension_worst  569 non-null    float64
 32  Unnamed: 32              0 non-null      float64
dtypes: float64(31), int64(1), object(1)
memory usage: 146.8+ KB
USING DESCRIBE FUNCTION

[ ]
df.describe()

[ ]
df.columns
Index(['id', 'diagnosis', 'radius_mean', 'texture_mean', 'perimeter_mean',
       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',
       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',
       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',
       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',
       'fractal_dimension_se', 'radius_worst', 'texture_worst',
       'perimeter_worst', 'area_worst', 'smoothness_worst',
       'compactness_worst', 'concavity_worst', 'concave points_worst',
       'symmetry_worst', 'fractal_dimension_worst', 'Unnamed: 32'],
      dtype='object')
DEFINE TARGET VARIABLE "Y" AND FEATURE VARIBLES "X"

Double-click (or enter) to edit

[ ]
y = df['fractal_dimension_worst']
X = df[['radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',
       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',
       'fractal_dimension_se', 'radius_worst', 'texture_worst',
       'perimeter_worst', 'area_worst', 'smoothness_worst',
       'compactness_worst', 'concavity_worst', 'concave points_worst',
       'symmetry_worst']]
TRAIN TEST SPLIT

[ ]
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=2529)
MODEL SELECTION

[ ]

from sklearn.linear_model import LinearRegression
model = LinearRegression()
TRAIN MODEL

[ ]
model.fit(X_train,y_train)

[ ]
model.intercept_
0.06245540256757611
[ ]
model.coef_
array([-1.81379508e-02, -9.03230562e-04,  4.13107895e-03, -4.87389220e-05,
       -1.67079667e-01, -3.26096093e-01, -7.87238664e-02, -1.53042771e-01,
       -1.82708278e-01,  4.01800277e+00,  1.25137487e-03,  1.92744074e-05,
       -5.67702487e-04,  1.21922368e-05,  1.24015360e-01,  8.62711608e-02,
        1.80290077e-02, -7.49588021e-03,  3.18206135e-02])
PREDICTION

[ ]
y_pred=model.predict(X_test)
Evoluation

[ ]
from sklearn.metrics import mean_absolute_percentage_error, mean_absolute_error, mean_squared_error
mean_absolute_percentage_error(y_test,y_pred)
0.04774436805027091
[ ]
snc.regplot(x='concave points_worst', y='fractal_dimension_worst', data = df,fit_reg=False)
<Axes: xlabel='concave points_worst', ylabel='fractal_dimension_worst'>

Double-click (or enter) to edit
